/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeader', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ContractHeaders', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.ErrorResponse', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.Role', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.RoleType', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.RoleTypes', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.SearchCriteria', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.Storage', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.Storage.Storage_Action', null, global);
goog.exportSymbol('proto.org.simplity.apiscdb.Storage.Storage_Uom', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.ContractHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.simplity.apiscdb.ContractHeader.repeatedFields_, null);
};
goog.inherits(proto.org.simplity.apiscdb.ContractHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.ContractHeader.displayName = 'proto.org.simplity.apiscdb.ContractHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.simplity.apiscdb.ContractHeader.repeatedFields_ = [27,31];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.ContractHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.ContractHeader} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ContractHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetowner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bench: jspb.Message.getFieldWithDefault(msg, 3, 0),
    city: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractenddate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contractlink: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contractnum: jspb.Message.getFieldWithDefault(msg, 7, ""),
    contractsigndate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    contractstartdate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    contractingentity: jspb.Message.getFieldWithDefault(msg, 10, ""),
    country: jspb.Message.getFieldWithDefault(msg, 11, 0),
    county: jspb.Message.getFieldWithDefault(msg, 12, ""),
    dealcounterparty: jspb.Message.getFieldWithDefault(msg, 13, ""),
    dealname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 15, ""),
    durationinmonths: jspb.Message.getFieldWithDefault(msg, 16, 0),
    econs: jspb.Message.getFieldWithDefault(msg, 17, 0),
    econsuom: jspb.Message.getFieldWithDefault(msg, 18, 0),
    excessthroughputrate: jspb.Message.getFieldWithDefault(msg, 19, 0),
    excessthroughputrateuom: jspb.Message.getFieldWithDefault(msg, 20, 0),
    externalcontractnum: jspb.Message.getFieldWithDefault(msg, 21, ""),
    id: jspb.Message.getFieldWithDefault(msg, 22, 0),
    leasetype: jspb.Message.getFieldWithDefault(msg, 23, 0),
    notes: jspb.Message.getFieldWithDefault(msg, 24, ""),
    otherrefnum: jspb.Message.getFieldWithDefault(msg, 25, ""),
    region: jspb.Message.getFieldWithDefault(msg, 26, 0),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.org.simplity.apiscdb.Role.toObject, includeInstance),
    segment: jspb.Message.getFieldWithDefault(msg, 28, ""),
    state: jspb.Message.getFieldWithDefault(msg, 29, ""),
    status: jspb.Message.getFieldWithDefault(msg, 30, 0),
    tanksList: jspb.Message.toObjectList(msg.getTanksList(),
    proto.org.simplity.apiscdb.Storage.toObject, includeInstance),
    terminal: jspb.Message.getFieldWithDefault(msg, 32, ""),
    throughputsperyear: jspb.Message.getFieldWithDefault(msg, 33, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.ContractHeader}
 */
proto.org.simplity.apiscdb.ContractHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.ContractHeader;
  return proto.org.simplity.apiscdb.ContractHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.ContractHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.ContractHeader}
 */
proto.org.simplity.apiscdb.ContractHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetowner(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBench(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContractenddate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractlink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractnum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContractsigndate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContractstartdate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractingentity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountry(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounty(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealcounterparty(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationinmonths(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEcons(value);
      break;
    case 18:
      var value = /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM} */ (reader.readEnum());
      msg.setEconsuom(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExcessthroughputrate(value);
      break;
    case 20:
      var value = /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM} */ (reader.readEnum());
      msg.setExcessthroughputrateuom(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalcontractnum(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 23:
      var value = /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType} */ (reader.readEnum());
      msg.setLeasetype(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherrefnum(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegion(value);
      break;
    case 27:
      var value = new proto.org.simplity.apiscdb.Role;
      reader.readMessage(value,proto.org.simplity.apiscdb.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegment(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 30:
      var value = /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 31:
      var value = new proto.org.simplity.apiscdb.Storage;
      reader.readMessage(value,proto.org.simplity.apiscdb.Storage.deserializeBinaryFromReader);
      msg.addTanks(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThroughputsperyear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.ContractHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.ContractHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.ContractHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetowner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBench();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractenddate();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getContractlink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContractnum();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContractsigndate();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getContractstartdate();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getContractingentity();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCountry();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getCounty();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDealcounterparty();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDealname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getDurationinmonths();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getEcons();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getEconsuom();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getExcessthroughputrate();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getExcessthroughputrateuom();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getExternalcontractnum();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getLeasetype();
  if (f !== 0.0) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getOtherrefnum();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getRegion();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      proto.org.simplity.apiscdb.Role.serializeBinaryToWriter
    );
  }
  f = message.getSegment();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      30,
      f
    );
  }
  f = message.getTanksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      31,
      f,
      proto.org.simplity.apiscdb.Storage.serializeBinaryToWriter
    );
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getThroughputsperyear();
  if (f !== 0) {
    writer.writeInt64(
      33,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM = {
  NPV: 0,
  GM: 1
};

/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM = {
  M3: 0,
  BBL: 1,
  USG: 2
};

/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType = {
  OPERATING: 0,
  CAPITAL: 1,
  LTCC: 2
};

/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu = {
  LIVE: 0,
  CLOSED: 1
};

/**
 * optional string assetName = 1;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getAssetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setAssetname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetOwner = 2;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getAssetowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setAssetowner = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 bench = 3;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getBench = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setBench = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string city = 4;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setCity = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 contractEndDate = 5;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractenddate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractenddate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string contractLink = 6;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractlink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractlink = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string contractNum = 7;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractnum = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 contractSignDate = 8;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractsigndate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractsigndate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 contractStartDate = 9;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractstartdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractstartdate = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string contractingEntity = 10;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getContractingentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setContractingentity = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 country = 11;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getCountry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string county = 12;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getCounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setCounty = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string dealCounterParty = 13;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getDealcounterparty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setDealcounterparty = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string dealName = 14;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getDealname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setDealname = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string desc = 15;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int64 durationInMonths = 16;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getDurationinmonths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setDurationinmonths = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int64 econs = 17;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getEcons = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setEcons = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional ContractHeader_EconsUOM econsUOM = 18;
 * @return {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getEconsuom = function() {
  return /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_EconsUOM} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setEconsuom = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional int64 excessThroughputRate = 19;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getExcessthroughputrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setExcessthroughputrate = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional ContractHeader_ExcessThroughputRateUOM excessThroughputRateUOM = 20;
 * @return {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getExcessthroughputrateuom = function() {
  return /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_ExcessThroughputRateUOM} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setExcessthroughputrateuom = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string externalContractNum = 21;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getExternalcontractnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setExternalcontractnum = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional int64 id = 22;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setId = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional ContractHeader_LeaseType leaseType = 23;
 * @return {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getLeasetype = function() {
  return /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_LeaseType} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setLeasetype = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional string notes = 24;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setNotes = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional string otherRefNum = 25;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getOtherrefnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setOtherrefnum = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional int64 region = 26;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getRegion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setRegion = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * repeated Role roles = 27;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.simplity.apiscdb.Role>}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getRolesList = function() {
  return /** @type{!Array.<!proto.org.simplity.apiscdb.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.simplity.apiscdb.Role, 27));
};


/** @param {!Array.<!proto.org.simplity.apiscdb.Role>} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.org.simplity.apiscdb.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.simplity.apiscdb.Role}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.org.simplity.apiscdb.Role, opt_index);
};


proto.org.simplity.apiscdb.ContractHeader.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional string segment = 28;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setSegment = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional string state = 29;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setState = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional ContractHeader_Statu status = 30;
 * @return {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getStatus = function() {
  return /** @type {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {!proto.org.simplity.apiscdb.ContractHeader.ContractHeader_Statu} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * repeated Storage tanks = 31;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.simplity.apiscdb.Storage>}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getTanksList = function() {
  return /** @type{!Array.<!proto.org.simplity.apiscdb.Storage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.simplity.apiscdb.Storage, 31));
};


/** @param {!Array.<!proto.org.simplity.apiscdb.Storage>} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setTanksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.org.simplity.apiscdb.Storage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.simplity.apiscdb.Storage}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.addTanks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.org.simplity.apiscdb.Storage, opt_index);
};


proto.org.simplity.apiscdb.ContractHeader.prototype.clearTanksList = function() {
  this.setTanksList([]);
};


/**
 * optional string terminal = 32;
 * @return {string}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setTerminal = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * optional int64 throughputsPerYear = 33;
 * @return {number}
 */
proto.org.simplity.apiscdb.ContractHeader.prototype.getThroughputsperyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.ContractHeader.prototype.setThroughputsperyear = function(value) {
  jspb.Message.setField(this, 33, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.ContractHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.simplity.apiscdb.ContractHeaders.repeatedFields_, null);
};
goog.inherits(proto.org.simplity.apiscdb.ContractHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.ContractHeaders.displayName = 'proto.org.simplity.apiscdb.ContractHeaders';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.simplity.apiscdb.ContractHeaders.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ContractHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.ContractHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.ContractHeaders} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ContractHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractheadersList: jspb.Message.toObjectList(msg.getContractheadersList(),
    proto.org.simplity.apiscdb.ContractHeader.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.ContractHeaders}
 */
proto.org.simplity.apiscdb.ContractHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.ContractHeaders;
  return proto.org.simplity.apiscdb.ContractHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.ContractHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.ContractHeaders}
 */
proto.org.simplity.apiscdb.ContractHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.simplity.apiscdb.ContractHeader;
      reader.readMessage(value,proto.org.simplity.apiscdb.ContractHeader.deserializeBinaryFromReader);
      msg.addContractheaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.ContractHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.ContractHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.ContractHeaders} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.ContractHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractheadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.simplity.apiscdb.ContractHeader.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContractHeader contractHeaders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.simplity.apiscdb.ContractHeader>}
 */
proto.org.simplity.apiscdb.ContractHeaders.prototype.getContractheadersList = function() {
  return /** @type{!Array.<!proto.org.simplity.apiscdb.ContractHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.simplity.apiscdb.ContractHeader, 1));
};


/** @param {!Array.<!proto.org.simplity.apiscdb.ContractHeader>} value */
proto.org.simplity.apiscdb.ContractHeaders.prototype.setContractheadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.simplity.apiscdb.ContractHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.simplity.apiscdb.ContractHeader}
 */
proto.org.simplity.apiscdb.ContractHeaders.prototype.addContractheaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.simplity.apiscdb.ContractHeader, opt_index);
};


proto.org.simplity.apiscdb.ContractHeaders.prototype.clearContractheadersList = function() {
  this.setContractheadersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.simplity.apiscdb.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.ErrorResponse.displayName = 'proto.org.simplity.apiscdb.ErrorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.ErrorResponse}
 */
proto.org.simplity.apiscdb.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.ErrorResponse;
  return proto.org.simplity.apiscdb.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.ErrorResponse}
 */
proto.org.simplity.apiscdb.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.org.simplity.apiscdb.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.ErrorResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.simplity.apiscdb.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.Role.displayName = 'proto.org.simplity.apiscdb.Role';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.Role} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    primaryindividual: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roletype: (f = msg.getRoletype()) && proto.org.simplity.apiscdb.RoleType.toObject(includeInstance, f),
    secondaryindividual: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.Role}
 */
proto.org.simplity.apiscdb.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.Role;
  return proto.org.simplity.apiscdb.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.Role}
 */
proto.org.simplity.apiscdb.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimaryindividual(value);
      break;
    case 3:
      var value = new proto.org.simplity.apiscdb.RoleType;
      reader.readMessage(value,proto.org.simplity.apiscdb.RoleType.deserializeBinaryFromReader);
      msg.setRoletype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryindividual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.Role} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrimaryindividual();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoletype();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.simplity.apiscdb.RoleType.serializeBinaryToWriter
    );
  }
  f = message.getSecondaryindividual();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.org.simplity.apiscdb.Role.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Role.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string primaryIndividual = 2;
 * @return {string}
 */
proto.org.simplity.apiscdb.Role.prototype.getPrimaryindividual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.Role.prototype.setPrimaryindividual = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional RoleType roleType = 3;
 * @return {?proto.org.simplity.apiscdb.RoleType}
 */
proto.org.simplity.apiscdb.Role.prototype.getRoletype = function() {
  return /** @type{?proto.org.simplity.apiscdb.RoleType} */ (
    jspb.Message.getWrapperField(this, proto.org.simplity.apiscdb.RoleType, 3));
};


/** @param {?proto.org.simplity.apiscdb.RoleType|undefined} value */
proto.org.simplity.apiscdb.Role.prototype.setRoletype = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.org.simplity.apiscdb.Role.prototype.clearRoletype = function() {
  this.setRoletype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.org.simplity.apiscdb.Role.prototype.hasRoletype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string secondaryIndividual = 4;
 * @return {string}
 */
proto.org.simplity.apiscdb.Role.prototype.getSecondaryindividual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.Role.prototype.setSecondaryindividual = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.RoleType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.simplity.apiscdb.RoleType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.RoleType.displayName = 'proto.org.simplity.apiscdb.RoleType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.RoleType.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.RoleType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.RoleType} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.RoleType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.RoleType}
 */
proto.org.simplity.apiscdb.RoleType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.RoleType;
  return proto.org.simplity.apiscdb.RoleType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.RoleType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.RoleType}
 */
proto.org.simplity.apiscdb.RoleType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.RoleType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.RoleType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.RoleType} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.RoleType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.org.simplity.apiscdb.RoleType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.RoleType.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.org.simplity.apiscdb.RoleType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.RoleType.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.RoleTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.simplity.apiscdb.RoleTypes.repeatedFields_, null);
};
goog.inherits(proto.org.simplity.apiscdb.RoleTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.RoleTypes.displayName = 'proto.org.simplity.apiscdb.RoleTypes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.simplity.apiscdb.RoleTypes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.RoleTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.RoleTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.RoleTypes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.RoleTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    roletypesList: jspb.Message.toObjectList(msg.getRoletypesList(),
    proto.org.simplity.apiscdb.RoleType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.RoleTypes}
 */
proto.org.simplity.apiscdb.RoleTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.RoleTypes;
  return proto.org.simplity.apiscdb.RoleTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.RoleTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.RoleTypes}
 */
proto.org.simplity.apiscdb.RoleTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.simplity.apiscdb.RoleType;
      reader.readMessage(value,proto.org.simplity.apiscdb.RoleType.deserializeBinaryFromReader);
      msg.addRoletypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.RoleTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.RoleTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.RoleTypes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.RoleTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoletypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.simplity.apiscdb.RoleType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoleType roleTypes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.simplity.apiscdb.RoleType>}
 */
proto.org.simplity.apiscdb.RoleTypes.prototype.getRoletypesList = function() {
  return /** @type{!Array.<!proto.org.simplity.apiscdb.RoleType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.simplity.apiscdb.RoleType, 1));
};


/** @param {!Array.<!proto.org.simplity.apiscdb.RoleType>} value */
proto.org.simplity.apiscdb.RoleTypes.prototype.setRoletypesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.simplity.apiscdb.RoleType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.simplity.apiscdb.RoleType}
 */
proto.org.simplity.apiscdb.RoleTypes.prototype.addRoletypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.simplity.apiscdb.RoleType, opt_index);
};


proto.org.simplity.apiscdb.RoleTypes.prototype.clearRoletypesList = function() {
  this.setRoletypesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.SearchCriteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.simplity.apiscdb.SearchCriteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.SearchCriteria.displayName = 'proto.org.simplity.apiscdb.SearchCriteria';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.SearchCriteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.SearchCriteria} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.SearchCriteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetowner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bench: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bpcontractnum: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bpcontractingentity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    city: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contractstatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    country: jspb.Message.getFieldWithDefault(msg, 8, 0),
    county: jspb.Message.getFieldWithDefault(msg, 9, ""),
    dealcounterparty: jspb.Message.getFieldWithDefault(msg, 10, ""),
    dealname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    gradegroup: jspb.Message.getFieldWithDefault(msg, 12, 0),
    region: jspb.Message.getFieldWithDefault(msg, 13, 0),
    segment: jspb.Message.getFieldWithDefault(msg, 14, ""),
    state: jspb.Message.getFieldWithDefault(msg, 15, ""),
    terminal: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.SearchCriteria}
 */
proto.org.simplity.apiscdb.SearchCriteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.SearchCriteria;
  return proto.org.simplity.apiscdb.SearchCriteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.SearchCriteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.SearchCriteria}
 */
proto.org.simplity.apiscdb.SearchCriteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetowner(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBench(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBpcontractnum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBpcontractingentity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 7:
      var value = /** @type {!proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu} */ (reader.readEnum());
      msg.setContractstatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCountry(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounty(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealcounterparty(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealname(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGradegroup(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegion(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegment(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.SearchCriteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.SearchCriteria} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.SearchCriteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetowner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBench();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBpcontractnum();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBpcontractingentity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContractstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCountry();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getCounty();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDealcounterparty();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDealname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getGradegroup();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRegion();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getSegment();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu = {
  LIVE: 0,
  CLOSED: 1
};

/**
 * optional string assetName = 1;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getAssetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setAssetname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetOwner = 2;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getAssetowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setAssetowner = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 bench = 3;
 * @return {number}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getBench = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setBench = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string bpContractNum = 4;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getBpcontractnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setBpcontractnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string bpContractingEntity = 5;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getBpcontractingentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setBpcontractingentity = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string city = 6;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setCity = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional SearchCriteria_ContractStatu contractStatus = 7;
 * @return {!proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getContractstatus = function() {
  return /** @type {!proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.org.simplity.apiscdb.SearchCriteria.SearchCriteria_ContractStatu} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setContractstatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 country = 8;
 * @return {number}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getCountry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string county = 9;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getCounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setCounty = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string dealCounterParty = 10;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getDealcounterparty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setDealcounterparty = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string dealName = 11;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getDealname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setDealname = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int64 gradeGroup = 12;
 * @return {number}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getGradegroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setGradegroup = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int64 region = 13;
 * @return {number}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getRegion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setRegion = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string segment = 14;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setSegment = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string state = 15;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setState = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string terminal = 16;
 * @return {string}
 */
proto.org.simplity.apiscdb.SearchCriteria.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.SearchCriteria.prototype.setTerminal = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.simplity.apiscdb.Storage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.simplity.apiscdb.Storage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.simplity.apiscdb.Storage.displayName = 'proto.org.simplity.apiscdb.Storage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.simplity.apiscdb.Storage.prototype.toObject = function(opt_includeInstance) {
  return proto.org.simplity.apiscdb.Storage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.simplity.apiscdb.Storage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.org.simplity.apiscdb.Storage.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gradegroup: jspb.Message.getFieldWithDefault(msg, 4, 0),
    id: jspb.Message.getFieldWithDefault(msg, 5, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    storagerate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tankid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uom: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.simplity.apiscdb.Storage}
 */
proto.org.simplity.apiscdb.Storage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.simplity.apiscdb.Storage;
  return proto.org.simplity.apiscdb.Storage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.simplity.apiscdb.Storage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.simplity.apiscdb.Storage}
 */
proto.org.simplity.apiscdb.Storage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.org.simplity.apiscdb.Storage.Storage_Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGradegroup(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStoragerate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTankid(value);
      break;
    case 9:
      var value = /** @type {!proto.org.simplity.apiscdb.Storage.Storage_Uom} */ (reader.readEnum());
      msg.setUom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.simplity.apiscdb.Storage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.simplity.apiscdb.Storage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.simplity.apiscdb.Storage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.simplity.apiscdb.Storage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGradegroup();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getStoragerate();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTankid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUom();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.Storage.Storage_Action = {
  ADD: 0,
  UPDATE: 1,
  DELETE: 2
};

/**
 * @enum {number}
 */
proto.org.simplity.apiscdb.Storage.Storage_Uom = {
  M3: 0,
  BBL: 1,
  USG: 2
};

/**
 * optional Storage_Action action = 1;
 * @return {!proto.org.simplity.apiscdb.Storage.Storage_Action}
 */
proto.org.simplity.apiscdb.Storage.prototype.getAction = function() {
  return /** @type {!proto.org.simplity.apiscdb.Storage.Storage_Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.org.simplity.apiscdb.Storage.Storage_Action} value */
proto.org.simplity.apiscdb.Storage.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 currency = 2;
 * @return {number}
 */
proto.org.simplity.apiscdb.Storage.prototype.getCurrency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Storage.prototype.setCurrency = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.org.simplity.apiscdb.Storage.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.Storage.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 gradeGroup = 4;
 * @return {number}
 */
proto.org.simplity.apiscdb.Storage.prototype.getGradegroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Storage.prototype.setGradegroup = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 id = 5;
 * @return {number}
 */
proto.org.simplity.apiscdb.Storage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Storage.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 quantity = 6;
 * @return {number}
 */
proto.org.simplity.apiscdb.Storage.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Storage.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 storageRate = 7;
 * @return {number}
 */
proto.org.simplity.apiscdb.Storage.prototype.getStoragerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.org.simplity.apiscdb.Storage.prototype.setStoragerate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string tankId = 8;
 * @return {string}
 */
proto.org.simplity.apiscdb.Storage.prototype.getTankid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.org.simplity.apiscdb.Storage.prototype.setTankid = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Storage_Uom uom = 9;
 * @return {!proto.org.simplity.apiscdb.Storage.Storage_Uom}
 */
proto.org.simplity.apiscdb.Storage.prototype.getUom = function() {
  return /** @type {!proto.org.simplity.apiscdb.Storage.Storage_Uom} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.org.simplity.apiscdb.Storage.Storage_Uom} value */
proto.org.simplity.apiscdb.Storage.prototype.setUom = function(value) {
  jspb.Message.setField(this, 9, value);
};


goog.object.extend(exports, proto.org.simplity.apiscdb);
