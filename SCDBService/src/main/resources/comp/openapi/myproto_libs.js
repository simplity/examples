/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.apiscdb.Contract');
goog.provide('proto.apiscdb.GetContractContractIdRequest');
goog.provide('proto.apiscdb.GetContractResponse');
goog.provide('proto.apiscdb.PostContractRequest');
goog.provide('proto.apiscdb.PutContractContractIdRequest');
goog.provide('proto.apiscdb.Role');
goog.provide('proto.apiscdb.RoleType');
goog.provide('proto.apiscdb.Tank');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.GetContractResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiscdb.GetContractResponse.repeatedFields_, null);
};
goog.inherits(proto.apiscdb.GetContractResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.GetContractResponse.displayName = 'proto.apiscdb.GetContractResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiscdb.GetContractResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.GetContractResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.GetContractResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.GetContractResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.GetContractResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.apiscdb.Contract.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.GetContractResponse}
 */
proto.apiscdb.GetContractResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.GetContractResponse;
  return proto.apiscdb.GetContractResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.GetContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.GetContractResponse}
 */
proto.apiscdb.GetContractResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apiscdb.Contract;
      reader.readMessage(value,proto.apiscdb.Contract.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.GetContractResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.GetContractResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.GetContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.GetContractResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apiscdb.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contract items = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.apiscdb.Contract>}
 */
proto.apiscdb.GetContractResponse.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.apiscdb.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apiscdb.Contract, 1));
};


/** @param {!Array.<!proto.apiscdb.Contract>} value */
proto.apiscdb.GetContractResponse.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apiscdb.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apiscdb.Contract}
 */
proto.apiscdb.GetContractResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apiscdb.Contract, opt_index);
};


proto.apiscdb.GetContractResponse.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.PostContractRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiscdb.PostContractRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.PostContractRequest.displayName = 'proto.apiscdb.PostContractRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.PostContractRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.PostContractRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.PostContractRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.PostContractRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && proto.apiscdb.Contract.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.PostContractRequest}
 */
proto.apiscdb.PostContractRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.PostContractRequest;
  return proto.apiscdb.PostContractRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.PostContractRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.PostContractRequest}
 */
proto.apiscdb.PostContractRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apiscdb.Contract;
      reader.readMessage(value,proto.apiscdb.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.PostContractRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.PostContractRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.PostContractRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.PostContractRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apiscdb.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * optional Contract contract = 1;
 * @return {?proto.apiscdb.Contract}
 */
proto.apiscdb.PostContractRequest.prototype.getContract = function() {
  return /** @type{?proto.apiscdb.Contract} */ (
    jspb.Message.getWrapperField(this, proto.apiscdb.Contract, 1));
};


/** @param {?proto.apiscdb.Contract|undefined} value */
proto.apiscdb.PostContractRequest.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.apiscdb.PostContractRequest.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apiscdb.PostContractRequest.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.GetContractContractIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiscdb.GetContractContractIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.GetContractContractIdRequest.displayName = 'proto.apiscdb.GetContractContractIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.GetContractContractIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.GetContractContractIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.GetContractContractIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.GetContractContractIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.GetContractContractIdRequest}
 */
proto.apiscdb.GetContractContractIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.GetContractContractIdRequest;
  return proto.apiscdb.GetContractContractIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.GetContractContractIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.GetContractContractIdRequest}
 */
proto.apiscdb.GetContractContractIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.GetContractContractIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.GetContractContractIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.GetContractContractIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.GetContractContractIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.apiscdb.GetContractContractIdRequest.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiscdb.GetContractContractIdRequest.prototype.setContractid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.PutContractContractIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiscdb.PutContractContractIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.PutContractContractIdRequest.displayName = 'proto.apiscdb.PutContractContractIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.PutContractContractIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.PutContractContractIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.PutContractContractIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.PutContractContractIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: (f = msg.getContract()) && proto.apiscdb.Contract.toObject(includeInstance, f),
    contractid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.PutContractContractIdRequest}
 */
proto.apiscdb.PutContractContractIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.PutContractContractIdRequest;
  return proto.apiscdb.PutContractContractIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.PutContractContractIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.PutContractContractIdRequest}
 */
proto.apiscdb.PutContractContractIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apiscdb.Contract;
      reader.readMessage(value,proto.apiscdb.Contract.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.PutContractContractIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.PutContractContractIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.PutContractContractIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.PutContractContractIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apiscdb.Contract.serializeBinaryToWriter
    );
  }
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Contract contract = 1;
 * @return {?proto.apiscdb.Contract}
 */
proto.apiscdb.PutContractContractIdRequest.prototype.getContract = function() {
  return /** @type{?proto.apiscdb.Contract} */ (
    jspb.Message.getWrapperField(this, proto.apiscdb.Contract, 1));
};


/** @param {?proto.apiscdb.Contract|undefined} value */
proto.apiscdb.PutContractContractIdRequest.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.apiscdb.PutContractContractIdRequest.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.apiscdb.PutContractContractIdRequest.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string contractId = 2;
 * @return {string}
 */
proto.apiscdb.PutContractContractIdRequest.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiscdb.PutContractContractIdRequest.prototype.setContractid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiscdb.Contract.repeatedFields_, null);
};
goog.inherits(proto.apiscdb.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.Contract.displayName = 'proto.apiscdb.Contract';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiscdb.Contract.repeatedFields_ = [25,29];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.Contract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetowner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bench: jspb.Message.getFieldWithDefault(msg, 3, ""),
    city: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractenddate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    contractnum: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contractsigndate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    contractstartdate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    contractingentity: jspb.Message.getFieldWithDefault(msg, 9, ""),
    country: jspb.Message.getFieldWithDefault(msg, 10, ""),
    county: jspb.Message.getFieldWithDefault(msg, 11, ""),
    dealcounterparty: jspb.Message.getFieldWithDefault(msg, 12, ""),
    dealname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 14, ""),
    durationinmonths: jspb.Message.getFieldWithDefault(msg, 15, ""),
    econs: jspb.Message.getFieldWithDefault(msg, 16, ""),
    econsuom: jspb.Message.getFieldWithDefault(msg, 17, ""),
    excessthroughputrate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    excessthroughputrateuom: jspb.Message.getFieldWithDefault(msg, 19, ""),
    id: jspb.Message.getFieldWithDefault(msg, 20, ""),
    leasetype: jspb.Message.getFieldWithDefault(msg, 21, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 22, ""),
    otherrefnum: jspb.Message.getFieldWithDefault(msg, 23, ""),
    region: jspb.Message.getFieldWithDefault(msg, 24, ""),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.apiscdb.Role.toObject, includeInstance),
    segment: jspb.Message.getFieldWithDefault(msg, 26, ""),
    state: jspb.Message.getFieldWithDefault(msg, 27, ""),
    status: jspb.Message.getFieldWithDefault(msg, 28, ""),
    tanksList: jspb.Message.toObjectList(msg.getTanksList(),
    proto.apiscdb.Tank.toObject, includeInstance),
    terminal: jspb.Message.getFieldWithDefault(msg, 30, ""),
    throughputsperyear: jspb.Message.getFieldWithDefault(msg, 31, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.Contract}
 */
proto.apiscdb.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.Contract;
  return proto.apiscdb.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.Contract}
 */
proto.apiscdb.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetowner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBench(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractenddate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractnum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractsigndate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractstartdate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractingentity(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounty(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealcounterparty(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDealname(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDurationinmonths(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setEcons(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setEconsuom(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setExcessthroughputrate(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setExcessthroughputrateuom(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeasetype(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherrefnum(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 25:
      var value = new proto.apiscdb.Role;
      reader.readMessage(value,proto.apiscdb.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegment(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 29:
      var value = new proto.apiscdb.Tank;
      reader.readMessage(value,proto.apiscdb.Tank.deserializeBinaryFromReader);
      msg.addTanks(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerminal(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setThroughputsperyear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.Contract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetowner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBench();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractenddate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContractnum();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContractsigndate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContractstartdate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getContractingentity();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCounty();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDealcounterparty();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDealname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDurationinmonths();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getEcons();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getEconsuom();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getExcessthroughputrate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getExcessthroughputrateuom();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getLeasetype();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getOtherrefnum();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.apiscdb.Role.serializeBinaryToWriter
    );
  }
  f = message.getSegment();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getTanksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      29,
      f,
      proto.apiscdb.Tank.serializeBinaryToWriter
    );
  }
  f = message.getTerminal();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getThroughputsperyear();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
};


/**
 * optional string assetName = 1;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getAssetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setAssetname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string assetOwner = 2;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getAssetowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setAssetowner = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string bench = 3;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getBench = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setBench = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string city = 4;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setCity = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string contractEndDate = 5;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getContractenddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setContractenddate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string contractNum = 6;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getContractnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setContractnum = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string contractSignDate = 7;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getContractsigndate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setContractsigndate = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string contractStartDate = 8;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getContractstartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setContractstartdate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string contractingEntity = 9;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getContractingentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setContractingentity = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string country = 10;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string county = 11;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getCounty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setCounty = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string dealCounterParty = 12;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getDealcounterparty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setDealcounterparty = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string dealName = 13;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getDealname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setDealname = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string desc = 14;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string durationInMonths = 15;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getDurationinmonths = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setDurationinmonths = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string econs = 16;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getEcons = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setEcons = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string econsUOM = 17;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getEconsuom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setEconsuom = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string excessThroughputRate = 18;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getExcessthroughputrate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setExcessthroughputrate = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string excessThroughputRateUOM = 19;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getExcessthroughputrateuom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setExcessthroughputrateuom = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string id = 20;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setId = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string leaseType = 21;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getLeasetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setLeasetype = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string notes = 22;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setNotes = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional string otherRefNum = 23;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getOtherrefnum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setOtherrefnum = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional string region = 24;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setRegion = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * repeated Role roles = 25;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.apiscdb.Role>}
 */
proto.apiscdb.Contract.prototype.getRolesList = function() {
  return /** @type{!Array.<!proto.apiscdb.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apiscdb.Role, 25));
};


/** @param {!Array.<!proto.apiscdb.Role>} value */
proto.apiscdb.Contract.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.apiscdb.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apiscdb.Role}
 */
proto.apiscdb.Contract.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.apiscdb.Role, opt_index);
};


proto.apiscdb.Contract.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional string segment = 26;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getSegment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setSegment = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional string state = 27;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setState = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional string status = 28;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * repeated Tank tanks = 29;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.apiscdb.Tank>}
 */
proto.apiscdb.Contract.prototype.getTanksList = function() {
  return /** @type{!Array.<!proto.apiscdb.Tank>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apiscdb.Tank, 29));
};


/** @param {!Array.<!proto.apiscdb.Tank>} value */
proto.apiscdb.Contract.prototype.setTanksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 29, value);
};


/**
 * @param {!proto.apiscdb.Tank=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apiscdb.Tank}
 */
proto.apiscdb.Contract.prototype.addTanks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 29, opt_value, proto.apiscdb.Tank, opt_index);
};


proto.apiscdb.Contract.prototype.clearTanksList = function() {
  this.setTanksList([]);
};


/**
 * optional string terminal = 30;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getTerminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setTerminal = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional string throughputsPerYear = 31;
 * @return {string}
 */
proto.apiscdb.Contract.prototype.getThroughputsperyear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.apiscdb.Contract.prototype.setThroughputsperyear = function(value) {
  jspb.Message.setField(this, 31, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apiscdb.Role.repeatedFields_, null);
};
goog.inherits(proto.apiscdb.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.Role.displayName = 'proto.apiscdb.Role';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apiscdb.Role.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.Role} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    primaryindividual: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roletypeList: jspb.Message.toObjectList(msg.getRoletypeList(),
    proto.apiscdb.RoleType.toObject, includeInstance),
    secondaryindividual: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.Role}
 */
proto.apiscdb.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.Role;
  return proto.apiscdb.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.Role}
 */
proto.apiscdb.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimaryindividual(value);
      break;
    case 3:
      var value = new proto.apiscdb.RoleType;
      reader.readMessage(value,proto.apiscdb.RoleType.deserializeBinaryFromReader);
      msg.addRoletype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryindividual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.Role} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrimaryindividual();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoletypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apiscdb.RoleType.serializeBinaryToWriter
    );
  }
  f = message.getSecondaryindividual();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apiscdb.Role.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiscdb.Role.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string primaryIndividual = 2;
 * @return {string}
 */
proto.apiscdb.Role.prototype.getPrimaryindividual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiscdb.Role.prototype.setPrimaryindividual = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated RoleType roleType = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.apiscdb.RoleType>}
 */
proto.apiscdb.Role.prototype.getRoletypeList = function() {
  return /** @type{!Array.<!proto.apiscdb.RoleType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apiscdb.RoleType, 3));
};


/** @param {!Array.<!proto.apiscdb.RoleType>} value */
proto.apiscdb.Role.prototype.setRoletypeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apiscdb.RoleType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apiscdb.RoleType}
 */
proto.apiscdb.Role.prototype.addRoletype = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apiscdb.RoleType, opt_index);
};


proto.apiscdb.Role.prototype.clearRoletypeList = function() {
  this.setRoletypeList([]);
};


/**
 * optional string secondaryIndividual = 4;
 * @return {string}
 */
proto.apiscdb.Role.prototype.getSecondaryindividual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.apiscdb.Role.prototype.setSecondaryindividual = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.RoleType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiscdb.RoleType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.RoleType.displayName = 'proto.apiscdb.RoleType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.RoleType.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.RoleType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.RoleType} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.RoleType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.RoleType}
 */
proto.apiscdb.RoleType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.RoleType;
  return proto.apiscdb.RoleType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.RoleType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.RoleType}
 */
proto.apiscdb.RoleType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.RoleType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.RoleType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.RoleType} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.RoleType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apiscdb.RoleType.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiscdb.RoleType.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.apiscdb.RoleType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiscdb.RoleType.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apiscdb.Tank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apiscdb.Tank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.apiscdb.Tank.displayName = 'proto.apiscdb.Tank';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apiscdb.Tank.prototype.toObject = function(opt_includeInstance) {
  return proto.apiscdb.Tank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apiscdb.Tank} msg The msg instance to transform.
 * @return {!Object}
 */
proto.apiscdb.Tank.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gradegroup: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    storagerate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tankid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    uom: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apiscdb.Tank}
 */
proto.apiscdb.Tank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apiscdb.Tank;
  return proto.apiscdb.Tank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apiscdb.Tank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apiscdb.Tank}
 */
proto.apiscdb.Tank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGradegroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoragerate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTankid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apiscdb.Tank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apiscdb.Tank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apiscdb.Tank} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.apiscdb.Tank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGradegroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStoragerate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTankid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string currency = 1;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setCurrency = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string gradeGroup = 3;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getGradegroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setGradegroup = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string quantity = 5;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setQuantity = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string storageRate = 6;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getStoragerate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setStoragerate = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string tankId = 7;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getTankid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setTankid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string uom = 8;
 * @return {string}
 */
proto.apiscdb.Tank.prototype.getUom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.apiscdb.Tank.prototype.setUom = function(value) {
  jspb.Message.setField(this, 8, value);
};


